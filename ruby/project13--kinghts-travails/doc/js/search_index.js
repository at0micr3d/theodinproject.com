var search_data = {"index":{"searchIndex":["knight_moves","board","knight","node","==()","knight_moves()","new()","new()","new()","valid_pos?()","readme"],"longSearchIndex":["knight_moves","knight_moves::board","knight_moves::knight","knight_moves::node","knight_moves::node#==()","knight_moves::knight#knight_moves()","knight_moves::board::new()","knight_moves::knight::new()","knight_moves::node::new()","knight_moves::board#valid_pos?()",""],"info":[["Knight_moves","","Knight_moves.html","","<p>The knight_moves module\n"],["Knight_moves::Board","","Knight_moves/Board.html","","<p>Board is used to validate the correctness of a move. (within board bounds)\n"],["Knight_moves::Knight","","Knight_moves/Knight.html","","<p>Chess piece\n"],["Knight_moves::Node","","Knight_moves/Node.html","","<p>Nodes are the basic unit for populating the tree that is used for searching\na path to destination\n"],["==","Knight_moves::Node","Knight_moves/Node.html#method-i-3D-3D","(another_node)","<p>defines the &#39;==&#39; method for comparing nodes with each other\n"],["knight_moves","Knight_moves::Knight","Knight_moves/Knight.html#method-i-knight_moves","(pos1, pos2)","<p>prints to stdout the moves that the knight needs to take to get from pos1\nto pos2\n"],["new","Knight_moves::Board","Knight_moves/Board.html#method-c-new","()",""],["new","Knight_moves::Knight","Knight_moves/Knight.html#method-c-new","()",""],["new","Knight_moves::Node","Knight_moves/Node.html#method-c-new","(position = [0,0])","<p>initializes node with a position.\n"],["valid_pos?","Knight_moves::Board","Knight_moves/Board.html#method-i-valid_pos-3F","(pos)","<p>don&#39;t go off board.\n"],["README","","README_md.html","","<p>Knight&#39;s Travail\n<p>Part of the odin project\n"]]}}