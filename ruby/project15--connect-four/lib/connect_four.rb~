#abstract game class. Should be usable for different board games
class Game
  attr_accessor :players, :game
  
  def initialize(game)
    @players = [Player.new("\u2460"), Player.new("\u2461")].cycle
    @game = game
  end

  def start_game
    until @game.winner? || @game.board_full?
      current_player = @players.next
      @game.make_move(current_player)
      @game.print_game_status
    end
    @game.print_winner
  end
end

#contains player information
class Player
  attr_accessor :symbol
  
  def initialize(symbol)
    @symbol = symbol
  end
end

#contains basic game rules and board
class ConnectFour
  attr_accessor :board, :empty_sign

  def initialize
    @empty_sign = "\u24C4"
    @board = create_board
  end
  
  def make_move(player)
    return "invalid input" if not player.is_a?(Player)
    return "full board" if board_full?
    
    puts "Which column do you want to drop your chip? Type 1,2,3,4,5 or 6."
    col = gets.chomp[0].to_i until [1,2,3,4,5,6].include?(col) && !full_column(col)
    drop_chip(col)
  end

  def print_winner
    
  end

  def winner?
    
  end
  
  def board_full?
    not @board.any? { |k,v| v == @empty_sign }
  end

  def print_game_status
    
  end

  private
  #creates board of x-axis 1 to 7, y-axis 1 to 6. Where 1,1 is topleft.
  def create_board
    b = Hash.new
    for i in 1..7
      for j in 1..6
        b[[i,j]] = @empty_sign
      end
    end
    return b
  end

  # check if the column is already full or not.
  def full_column(col)
    column = @board.select {|key, value| [col].include?(key[0].to_i) }
    return !column.any? { |k,v| v == @empty_sign }
  end

  def drop_chip
    
  end
end
