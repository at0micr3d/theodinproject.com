require 'spec_helper'

describe "Game" do
  before :each do
    @game = Game.new(ConnectFour.new)
  end

  describe "#new" do

    it "creates 2 players" do
      player1 = @game.players.next
      player2 = @game.players.next
      player3 = @game.players.next
      expect( player1 != player2 && player1 == player3 )
    end
    it { expect( @game.players.next ).to be_a Player }

    it "has a game type" do
      expect(@game.game).to be_a ConnectFour
    end
  end
end

describe "Player" do
  before :each do
    @player = Player.new("Clint")
  end
  
  describe "#new" do
    it { expect(@player.symbol).to be_a String }
    it { expect(@player.symbol).to eq("Clint") }  
  end
end

describe "ConnectFour" do
  let(:game) {ConnectFour.new }

  describe "#new" do
    it "has a board" do
      expect(game.board).to be_a Hash
    end
    
    it "creates a board of 6 horizontal and 7 vertical" do
      expect{ game.board.to include?([1,1], [6,7], [1,7], [6,1]) }
    end
  end
  
  describe "#make_move" do
                                                            
    it "validates player input" do
      expect(game.make_move("test")).to match(/invalid input/)
    end
  end

  describe "#print_winner" do
    
  end

  describe "create_board" do
    it "has 7 * 6 empty signs" do
      expect(game.board.to_s.scan(/#{game.empty_sign}/).length).to be(7 * 6)
    end
  end
  
  
  describe "#full_column" do
    let(:empty) { ConnectFour.new }
    let(:full) { ConnectFour.new }
    let(:halffull) { ConnectFour.new }

    before :each do
      (1..7).to_a.each {|i| empty.board[[1,i]] = "\u24C4" }
      (1..7).to_a.each {|i| full.board[[1,i]] = "\u24C5" }
      (1..3).to_a.each {|i| halffull.board[[1,i]] = "\u24C5" }
    end

    it "returns true when full" do
      expect(full.send(:full_column, 1)).to be true #use send for private methods.
    end

    it "returns false when empty" do
      expect(empty.send(:full_column, 1)).to be false
    end

    it "returns false when half full" do
      expect(halffull.send(:full_column, 1)).to be false
    end
  end

  describe "#drop_chip" do
    
  end
end


